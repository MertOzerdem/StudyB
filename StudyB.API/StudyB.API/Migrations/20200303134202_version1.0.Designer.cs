// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StudyB.API.DbContexts;

namespace StudyB.API.Migrations
{
    [DbContext(typeof(BuddyLibraryContext))]
    [Migration("20200303134202_version1.0")]
    partial class version10
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("StudyB.API.Entities.Chatroom", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ChatroomName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Chatrooms");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1acf8e02-9be4-428a-bd6b-8dce083bfac3"),
                            ChatroomName = "Cs 492"
                        },
                        new
                        {
                            Id = new Guid("ce446daa-5e35-4f2a-ab83-cf75cac4837e"),
                            ChatroomName = "Cs 453"
                        },
                        new
                        {
                            Id = new Guid("c25ed015-3e14-440d-a7c0-7eeedc0cf32b"),
                            ChatroomName = "Cs 491"
                        });
                });

            modelBuilder.Entity("StudyB.API.Entities.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ChatroomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("DateOfPost")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("FileAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ChatroomId");

                    b.HasIndex("UserId");

                    b.ToTable("Messages");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9bcfa927-179d-4346-a34e-e09928450456"),
                            ChatroomId = new Guid("1acf8e02-9be4-428a-bd6b-8dce083bfac3"),
                            DateOfPost = new DateTimeOffset(new DateTime(1690, 11, 23, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 2, 0, 0, 0)),
                            Text = "What is up?",
                            UserId = new Guid("d28888e9-2ba9-473a-a40f-e38cb54f9b35")
                        },
                        new
                        {
                            Id = new Guid("0936b9d0-c45a-4112-9306-fad95e9c07c7"),
                            ChatroomId = new Guid("1acf8e02-9be4-428a-bd6b-8dce083bfac3"),
                            DateOfPost = new DateTimeOffset(new DateTime(1988, 12, 9, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 2, 0, 0, 0)),
                            Text = "Mavi Tik",
                            UserId = new Guid("d28888e9-2ba9-473a-a40f-e38cb54f9b35")
                        });
                });

            modelBuilder.Entity("StudyB.API.Entities.Reward", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Rewards");
                });

            modelBuilder.Entity("StudyB.API.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d28888e9-2ba9-473a-a40f-e38cb54f9b35"),
                            FirstName = "Adam",
                            LastName = "Çocuk",
                            Password = "123",
                            UserName = "Ateşli çocuk"
                        },
                        new
                        {
                            Id = new Guid("da2fd609-d754-4feb-8acd-c4f9ff13ba96"),
                            FirstName = "Kadın",
                            LastName = "Adam",
                            Password = "159",
                            UserName = "Why are you gay?"
                        });
                });

            modelBuilder.Entity("StudyB.API.Entities.UserChatroom", b =>
                {
                    b.Property<Guid>("ChatroomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ChatroomId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserChatrooms");

                    b.HasData(
                        new
                        {
                            ChatroomId = new Guid("ce446daa-5e35-4f2a-ab83-cf75cac4837e"),
                            UserId = new Guid("d28888e9-2ba9-473a-a40f-e38cb54f9b35")
                        },
                        new
                        {
                            ChatroomId = new Guid("ce446daa-5e35-4f2a-ab83-cf75cac4837e"),
                            UserId = new Guid("da2fd609-d754-4feb-8acd-c4f9ff13ba96")
                        });
                });

            modelBuilder.Entity("StudyB.API.Entities.Message", b =>
                {
                    b.HasOne("StudyB.API.Entities.Chatroom", "Chatroom")
                        .WithMany("Messages")
                        .HasForeignKey("ChatroomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudyB.API.Entities.User", "User")
                        .WithMany("Messages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StudyB.API.Entities.Reward", b =>
                {
                    b.HasOne("StudyB.API.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StudyB.API.Entities.UserChatroom", b =>
                {
                    b.HasOne("StudyB.API.Entities.Chatroom", "Chatroom")
                        .WithMany("UserChatrooms")
                        .HasForeignKey("ChatroomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudyB.API.Entities.User", "User")
                        .WithMany("UserChatrooms")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
